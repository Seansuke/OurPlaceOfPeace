<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>MenuWideSwordButtonSprite</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>VirtualKeyParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
relativeX = 0;
relativeY = 0;
neutralZone = sprite_width / 3 / 2;
includeCenter = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Realign position.
x = view_xview[0] + view_wview[0] - sprite_width;
y = view_yview[0] + view_hview[0] - sprite_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for pressing
var maxMultiTouch = 2;
for(var i = 0; i &lt; maxMultiTouch; i++) {
    if(device_mouse_check_button(0, mb_left)) {
        var otherX = device_mouse_x(i);
        var otherY = device_mouse_y(i);
        if(otherX &lt; obj_camera.x) {
            // TODO - add the click-drag for directionals.
        }
        else {
            relativeX = otherX - x;
            relativeY = otherY - y;
            if(abs(relativeX) &lt; sprite_width /2 &amp;&amp; abs(relativeY) &lt; sprite_height /2) {
                includeCenter = true;
                event_user(0);
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control Attack and direction

if(neutralZone &lt; relativeX){
    // PLAYER 1 PRESSED
    // PLAYER 1 RIGHT
    with(obj_player) {
        if(combatId == 0) {
            virtualAction = BTN_ATTACK;
            virtualHorizontalDirection = BTN_RIGHT;
        }
    }
}
else if(relativeX &lt; - neutralZone){
    // PLAYER 1 PRESSED
    // PLAYER 1 LEFT
    with(obj_player) {
        if(combatId == 0) {
            virtualAction = BTN_ATTACK;
            virtualHorizontalDirection = BTN_LEFT;
        }
    }
}
else if(neutralZone &lt; relativeY){
    // PLAYER 1 PRESSED
    // PLAYER 1 DOWN
    with(obj_player) {
        if(combatId == 0) {
            virtualAction = BTN_ATTACK;
            virtualVerticalDirection = BTN_DOWN;
        }
    }
}
else if(relativeY &lt; - neutralZone){
    // PLAYER 1 PRESSED
    // PLAYER 1 UP
    with(obj_player) {
        if(combatId == 0) {
            virtualAction = BTN_ATTACK;
            virtualVerticalDirection = BTN_UP;
        }
    }
}
else if(includeCenter){
    // center touch
    virtualAction = BTN_ATTACK;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_bold_text(x - sprite_width,y - sprite_height,"dX:" + str(relativeX) + "dY:" + str(relativeY), c_white, c_black);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
