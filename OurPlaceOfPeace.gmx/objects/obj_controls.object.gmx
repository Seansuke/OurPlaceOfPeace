<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_joy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

v_type = BTN_TYPE_NONE;
v_text[0] = "";
v_text[1] = "";
v_text[2] = "";
v_currentKey = 0;
v_timer = 0;
v_on = false;
combatId = -1;
depth = -999;
for(i = 1;i &lt; BTN_MAX;i += 1) {
    ctrls[i] = 0;
}
alarm[1] = 3;
types[BTN_TYPE_NONE] = "NONE";
types[BTN_TYPE_KEYBOARD] = "Keyboard";
types[BTN_TYPE_GAMEPAD] = "Gamepad";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>v_text[0] = "Set";
v_text[1] = "Player " + str(combatId + 1);
v_text[2] = "Controls";
v_type = ctrl_get(combatId, BTN_TYPE);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selection timer</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Decrease the check timer */
v_timer -= 1;

/* Exit if not on or timer is not run yet */
if(v_on == false || v_timer &gt; 0) {
    exit;
}

// Disable Menu Controls to allow the controls to finish.
instance_deactivate_object(obj_areaMenu);
global.menu = true;//keep menu up

/* Draw text relative to current key */
v_text[0] = "PRESS"; 
switch(v_currentKey)
{
    case BTN_UP:
        v_text[1] = "UP";
    break;
    case BTN_RIGHT:
        v_text[1] = "RIGHT";
    break;
    case BTN_DOWN:
        v_text[1] = "DOWN";
    break;
    case BTN_LEFT:
        v_text[1] = "LEFT";
    break;
    case BTN_ATTACK:
        v_text[1] = "ATTACK";
    break;
    case BTN_GUARD:
        v_text[1] = "GUARD";
    break;
    case BTN_ARTES1:
        v_text[1] = "ARTES 1";
    break;
    case BTN_ARTES2:
        v_text[1] = "ARTES 2";
    break;
    case BTN_TARGET:
        v_text[1] = "TARGET";
    break;
    case BTN_ACTION:
        v_text[1] = "ACTION";
    break;
    case BTN_MENU:
        v_text[1] = "MENU";
    break;
}
v_text[2] = "KEY";

/* Set Key */
switch(v_type)
{
    case BTN_TYPE_KEYBOARD:
        ctrls[v_currentKey] = keyboard_key;
        
        /* Check if keyboard key is even pressed */
        if(ctrls[v_currentKey] != 0)
        {
            /* if a later key, ensure the key is not a copy of the previous key */
            if(v_currentKey == BTN_UP || (v_currentKey != BTN_UP &amp;&amp; ctrls[v_currentKey] != ctrls[v_currentKey - 1]))
            {
                v_currentKey += 1;
                v_timer = 5;
            }
        }
    break;
    case BTN_TYPE_GAMEPAD:
        /* Cycle through joystick buttons to see if any are pressed */
        for(i = 1;i &lt;= joystick_buttons(1);i += 1)
        {
            if(joystick_check_button(1,i) == true &amp;&amp; alarm[0] &lt; 0)
            {
                /* if a later key, ensure the key is not a copy of the previous key */
                if(v_currentKey == BTN_ATTACK || (v_currentKey != BTN_ATTACK &amp;&amp; i != ctrls[v_currentKey - 1]))
                {
                    ctrls[v_currentKey] = i;
                    v_currentKey += 1;
                    v_timer = 5;
                    i = joystick_buttons(1);
                    alarm[0] = 3;
                }
            }
        }
    break;
}
/* if keys are completed, finish up */
if(v_currentKey &gt;= BTN_MAX) {
    /* Set the newly placed controls into the global array */
    ctrl_new(combatId,v_type,
        ctrls[BTN_UP],ctrls[BTN_RIGHT],ctrls[BTN_DOWN],ctrls[BTN_LEFT],
        ctrls[BTN_ATTACK],ctrls[BTN_GUARD],ctrls[BTN_ARTES1],ctrls[BTN_ARTES2],
        ctrls[BTN_TARGET],ctrls[BTN_ACTION],ctrls[BTN_MENU]);   
    /* Reset data */
    v_type = "";
    v_text[0] = "Player " + str(combatId + 1);
    v_text[1] = "Controls";
    v_text[2] = "Set!";
    v_currentKey = 0;
    v_timer = 0;
    v_on = false;
    for(i=BTN_UP;i&lt;BTN_MAX;i+=1) {
        ctrls[i] = 0;
    }
        
    instance_activate_object(obj_areaMenu);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>v_type = (v_type + 1) mod BTN_TYPE_MAX;

/* ensure ctrl set begins working */
if(v_type == BTN_TYPE_NONE) {
    v_on = false;
    exit;
}

/* Begin setting keys, different for gamepad than for keyboard */
if(v_type == BTN_TYPE_KEYBOARD) {
    v_currentKey = BTN_UP;
}
else {
    v_currentKey = BTN_ATTACK;
}

/* turn on the timer */
v_on = true;
v_timer = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(combatId &lt; 0) exit;
switch(ctrl_get(combatId, BTN_TYPE))
{
    case BTN_TYPE_NONE:
        draw_sprite(spr_icon,0,x,y);
    break;
    case BTN_TYPE_KEYBOARD:
        draw_sprite(spr_key,0,x,y);
    break;
    default:
        draw_sprite(spr_joy,0,x,y);
    break;
}
for(i=0;i&lt;3;i+=1) {
    draw_bold_text(x, y-16 + i*16,v_text[i],c_white,c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
